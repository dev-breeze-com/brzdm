# Tsert.Com Copyright (C) 2015 <GPLv3>.
#
# Project Properties
#
CMAKE_MINIMUM_REQUIRED (VERSION 2.8)
PROJECT (brzdm)
SET (APPLICATION_NAME "brzdm")
SET (APPLICATION_CODENAME "${PROJECT_NAME}")
SET (APPLICATION_COPYRIGHT_YEARS "2015")
SET (APPLICATION_VERSION_MAJOR "1")
SET (APPLICATION_VERSION_MINOR "0")
SET (APPLICATION_VERSION_PATCH "0")
SET (APPLICATION_VERSION_TYPE "Release")
SET (APPLICATION_VERSION_STRING "${APPLICATION_VERSION_MAJOR}.${APPLICATION_VERSION_MINOR}.${APPLICATION_VERSION_PATCH}-${APPLICATION_VERSION_TYPE}")
SET (APPLICATION_VENDOR_ID "tsert.com")
SET (APPLICATION_VENDOR_NAME "Tsert.Com")
SET (APPLICATION_VENDOR_URL "www.breezeos.com")
SET (APPLICATION_ID "${APPLICATION_VENDOR_ID}.${PROJECT_NAME}")
SET (BRZDM_VERSION "${APPLICATION_VERSION_MAJOR}.${APPLICATION_VERSION_MINOR}.${APPLICATION_VERSION_PATCH}")

#
# Type of compilation
#
IF(NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE "$ENV{BUILD_TYPE}")
ENDIF(NOT CMAKE_BUILD_TYPE)

IF(NOT CMAKE_BUILD_TYPE)
#	SET (CMAKE_BUILD_TYPE "Release")
#   SET (CMAKE_BUILD_TYPE "RelWithDebInfo")
	SET (CMAKE_BUILD_TYPE "Debug")
ENDIF(NOT CMAKE_BUILD_TYPE)

#
# Show each command line as it is used
SET (CMAKE_VERBOSE_MAKEFILE 0)

#
# Install path
#
IF (CMAKE_INSTALL_PREFIX STREQUAL NULLARG)
SET (CMAKE_INSTALL_PREFIX "/usr")
SET (SYSCONFDIR "/etc")
ELSEIF (CMAKE_INSTALL_PREFIX STREQUAL "/usr")
SET (SYSCONFDIR "/etc")
ELSE ()
SET (SYSCONFDIR "${CMAKE_INSTALL_PREFIX}/etc")
ENDIF ()

SET (PKGDATADIR "${CMAKE_INSTALL_PREFIX}/share/brzdm")
SET (BINDIR "${CMAKE_INSTALL_PREFIX}/sbin")
SET (MANDIR "${CMAKE_INSTALL_PREFIX}/share/man")

#
# Target processor
#
SET(NULLARG "")
SET(ARCH "$ENV{ARCH}")
SET(MARCH "$ENV{MARCH}")

IF (ARCH STREQUAL NULLARG OR ARCH STREQUAL "i486")
SET(ARCH "${CMAKE_HOST_SYSTEM_PROCESSOR}")
ENDIF ()

IF (ARCH STREQUAL "i386" OR ARCH STREQUAL "i486" OR ARCH STREQUAL "i586" OR ARCH STREQUAL "i686")
	SET(ARCH "i486")
	SET(MARCH "i486")
	SET(USRLIB "${CMAKE_INSTALL_PREFIX}/lib")
	SET(CMAKE_SYSTEM_PROCESSOR "i486")
ELSEIF (ARCH STREQUAL "arm64" OR ARCH STREQUAL "aarch64")
	SET(USRLIB "${CMAKE_INSTALL_PREFIX}/lib64")
	SET(LIB_SUFFIX "64")
	SET(MARCH "aarch64")
	SET(CMAKE_SYSTEM_PROCESSOR "${ARCH}")
	SET(CMAKE_LIBRARY_ARCHITECTURE "${ARCH}")
ELSE ()
	SET(USRLIB "${CMAKE_INSTALL_PREFIX}/lib64")
	SET(LIB_SUFFIX "64")
	SET(MARCH "x86-64")
	SET(CMAKE_SYSTEM_PROCESSOR "${ARCH}")
	SET(CMAKE_LIBRARY_ARCHITECTURE "${ARCH}")
ENDIF ()

MESSAGE("\t==> ${ARCH} ${MARCH} flags enabled")

#
# Package Compression Type
#
SET(CMAKE_ZIPMODE "$ENV{CMAKE_ZIPMODE}")
IF (CMAKE_ZIPMODE STREQUAL NULLARG)
	SET(CMAKE_ZIPMODE "TGZ")
ENDIF (CMAKE_ZIPMODE STREQUAL NULLARG)

#
# Do not create static library
#
SET (BUILD_SHARED_LIBS ON)
SET (BUILD_STATIC_LIBS OFF)
SET (CREATE_STATIC_LIBRARY OFF)

SET (project_build_shared 1)
SET (project_build_static 0)

#
# Prepend include directories
#
SET (CMAKE_INCLUDE_DIRECTORIES_BEFORE 1)

SET (MAINFOLDER ${PROJECT_SOURCE_DIR})
INCLUDE_DIRECTORIES("${MAINFOLDER}/include")

INCLUDE(TestForANSIStreamHeaders)
INCLUDE(CheckTypeSize)
INCLUDE(CheckIncludeFiles)
INCLUDE(CheckIncludeFileCXX)
INCLUDE(CheckCXXCompilerFlag)
INCLUDE(TestForSTDNamespace)
INCLUDE(TestForANSIForScope)
INCLUDE(TestForSSTREAM)
INCLUDE(FindPkgConfig)
INCLUDE(UsePkgConfig)

#
# Check headers
#
SET(INCLUDES "")

MACRO (LA_CHECK_INCLUDE_FILE header var)
	CHECK_INCLUDE_FILES("${INCLUDES};${header}" ${var})
	IF (${var})
		SET(INCLUDES ${INCLUDES} ${header})
	ENDIF (${var})
ENDMACRO (LA_CHECK_INCLUDE_FILE)

# Alphabetize the rest unless there's a compelling reason
LA_CHECK_INCLUDE_FILE("acl/libacl.h" HAVE_ACL_LIBACL_H)

LA_CHECK_INCLUDE_FILE("ctype.h" HAVE_CTYPE_H)
LA_CHECK_INCLUDE_FILE("copyfile.h" HAVE_COPYFILE_H)
LA_CHECK_INCLUDE_FILE("direct.h" HAVE_DIRECT_H)
LA_CHECK_INCLUDE_FILE("dlfcn.h" HAVE_DLFCN_H)
LA_CHECK_INCLUDE_FILE("errno.h" HAVE_ERRNO_H)

LA_CHECK_INCLUDE_FILE("fcntl.h" HAVE_FCNTL_H)
LA_CHECK_INCLUDE_FILE("grp.h" HAVE_GRP_H)
LA_CHECK_INCLUDE_FILE("inttypes.h" HAVE_INTTYPES_H)
LA_CHECK_INCLUDE_FILE("io.h" HAVE_IO_H)
LA_CHECK_INCLUDE_FILE("langinfo.h" HAVE_LANGINFO_H)
LA_CHECK_INCLUDE_FILE("limits.h" HAVE_LIMITS_H)

LA_CHECK_INCLUDE_FILE("locale.h" HAVE_LOCALE_H)
LA_CHECK_INCLUDE_FILE("memory.h" HAVE_MEMORY_H)
LA_CHECK_INCLUDE_FILE("paths.h" HAVE_PATHS_H)
LA_CHECK_INCLUDE_FILE("poll.h" HAVE_POLL_H)
LA_CHECK_INCLUDE_FILE("process.h" HAVE_PROCESS_H)
LA_CHECK_INCLUDE_FILE("pthread.h" HAVE_PTHREAD_H)
LA_CHECK_INCLUDE_FILE("pwd.h" HAVE_PWD_H)

LA_CHECK_INCLUDE_FILE("regex.h" HAVE_REGEX_H)
LA_CHECK_INCLUDE_FILE("signal.h" HAVE_SIGNAL_H)
LA_CHECK_INCLUDE_FILE("spawn.h" HAVE_SPAWN_H)
LA_CHECK_INCLUDE_FILE("stdarg.h" HAVE_STDARG_H)
LA_CHECK_INCLUDE_FILE("stdint.h" HAVE_STDINT_H)
LA_CHECK_INCLUDE_FILE("stdlib.h" HAVE_STDLIB_H)
LA_CHECK_INCLUDE_FILE("string.h" HAVE_STRING_H)
LA_CHECK_INCLUDE_FILE("strings.h" HAVE_STRINGS_H)
LA_CHECK_INCLUDE_FILE("sys/acl.h" HAVE_SYS_ACL_H)
LA_CHECK_INCLUDE_FILE("sys/cdefs.h" HAVE_SYS_CDEFS_H)
LA_CHECK_INCLUDE_FILE("sys/ioctl.h" HAVE_SYS_IOCTL_H)
LA_CHECK_INCLUDE_FILE("sys/mkdev.h" HAVE_SYS_MKDEV_H)
LA_CHECK_INCLUDE_FILE("sys/mount.h" HAVE_SYS_MOUNT_H)
LA_CHECK_INCLUDE_FILE("sys/param.h" HAVE_SYS_PARAM_H)
LA_CHECK_INCLUDE_FILE("sys/poll.h" HAVE_SYS_POLL_H)
LA_CHECK_INCLUDE_FILE("sys/select.h" HAVE_SYS_SELECT_H)
LA_CHECK_INCLUDE_FILE("sys/stat.h" HAVE_SYS_STAT_H)
LA_CHECK_INCLUDE_FILE("sys/statfs.h" HAVE_SYS_STATFS_H)
LA_CHECK_INCLUDE_FILE("sys/statvfs.h" HAVE_SYS_STATVFS_H)
LA_CHECK_INCLUDE_FILE("sys/time.h" HAVE_SYS_TIME_H)
LA_CHECK_INCLUDE_FILE("sys/utime.h" HAVE_SYS_UTIME_H)
LA_CHECK_INCLUDE_FILE("sys/utsname.h" HAVE_SYS_UTSNAME_H)
LA_CHECK_INCLUDE_FILE("sys/vfs.h" HAVE_SYS_VFS_H)
LA_CHECK_INCLUDE_FILE("sys/wait.h" HAVE_SYS_WAIT_H)
LA_CHECK_INCLUDE_FILE("time.h" HAVE_TIME_H)
LA_CHECK_INCLUDE_FILE("unistd.h" HAVE_UNISTD_H)
LA_CHECK_INCLUDE_FILE("utime.h" HAVE_UTIME_H)
LA_CHECK_INCLUDE_FILE("wchar.h" HAVE_WCHAR_H)
LA_CHECK_INCLUDE_FILE("wctype.h" HAVE_WCTYPE_H)

#
# Check for integer types
#
#
CHECK_TYPE_SIZE("short" SIZE_OF_SHORT)
CHECK_TYPE_SIZE("int" SIZE_OF_INT)
CHECK_TYPE_SIZE("long" SIZE_OF_LONG)
CHECK_TYPE_SIZE("long long"     SIZE_OF_LONG_LONG)

CHECK_TYPE_SIZE("unsigned short" SIZE_OF_UNSIGNED_SHORT)
CHECK_TYPE_SIZE("unsigned" SIZE_OF_UNSIGNED)
CHECK_TYPE_SIZE("unsigned long" SIZE_OF_UNSIGNED_LONG)
CHECK_TYPE_SIZE("unsigned long long" SIZE_OF_UNSIGNED_LONG_LONG)

CHECK_TYPE_SIZE("__int64" __INT64)
CHECK_TYPE_SIZE("unsigned __int64" UNSIGNED___INT64)

CHECK_TYPE_SIZE(int16_t INT16_T)
CHECK_TYPE_SIZE(int32_t INT32_T)
CHECK_TYPE_SIZE(int64_t INT64_T)
CHECK_TYPE_SIZE(intmax_t INTMAX_T)
CHECK_TYPE_SIZE(uint8_t UINT8_T)
CHECK_TYPE_SIZE(uint16_t UINT16_T)
CHECK_TYPE_SIZE(uint32_t UINT32_T)
CHECK_TYPE_SIZE(uint64_t UINT64_T)
CHECK_TYPE_SIZE(uintmax_t UINTMAX_T)

CHECK_TYPE_SIZE(off_t OFF_T)
IF(NOT HAVE_OFF_T)
	SET(off_t "__int64")
ENDIF(NOT HAVE_OFF_T)

CHECK_TYPE_SIZE(ssize_t SSIZE_T)
IF(NOT HAVE_SSIZE_T)
	IF("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
		SET(ssize_t "int64_t")
	ELSE("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
		SET(ssize_t "long")
	ENDIF("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
ENDIF(NOT HAVE_SSIZE_T)

CHECK_TYPE_SIZE(uid_t UID_T)
IF(NOT HAVE_UID_T)
	IF(WIN32)
		SET(uid_t "short")
	ELSE(WIN32)
		SET(uid_t "unsigned int")
	ENDIF(WIN32)
ENDIF(NOT HAVE_UID_T)

CHECK_TYPE_SIZE(pid_t PID_T)
IF(NOT HAVE_PID_T)
	IF(WIN32)
		SET(pid_t "int")
	ELSE(WIN32)
		MESSAGE(FATAL_ERROR "pid_t doesn't exist on this platform?")
	ENDIF(WIN32)
ENDIF(NOT HAVE_PID_T)

#
# Configure Compile Flags
#
SET(CMAKE_REQUIRED_FLAGS "-Wall -Wformat -Wformat-security")
#SET(CMAKE_REQUIRED_FLAGS "-Wall -Wformat -Wformat-security -fpermissive")
SET(CMAKE_REQUIRED_LIBRARIES "uuid")

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99 -D_${ARCH}_ -march=${MARCH}")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wformat -Wformat-security" )
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fpic -fPIC -DPIC -fPIE -pie" )
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fvisibility=default" )
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fstack-protector-all" )

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -D_${ARCH}_ -march=${MARCH}")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wformat -Wformat-security")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpic -fPIC -DPIC -fPIE -pie")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=default")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fstack-protector-all")

SET(CMAKE_GCC_LDFLAGS "${CMAKE_GCC_LDFLAGS} -pie")
SET(CMAKE_CXX_LDFLAGS "${CMAKE_CXX_LDFLAGS} -pie")
SET(CMAKE_C_LDFLAGS "${CMAKE_C_LDFLAGS} -pie")

#
# Configure Load Flags
#
LINK_LIBRARIES("uuid")
LINK_LIBRARIES("util")
LINK_LIBRARIES("pthread")
LINK_LIBRARIES("dl")

# Get the compiler command line to build this project.
SET(CXX "$ENV{CXX}")
SET(DISTRO "$ENV{DISTRO}")

IF (NOT DEFINED DISTRO OR DISTRO STREQUAL "")
	SET (DISTRO "BreezeOS")
ENDIF ()

IF (NOT DEFINED CXX OR CXX STREQUAL "")
	SET (CC "gcc")
	SET (CXX "g++")
ENDIF () #NOT DEFINED CXX OR CXX STREQUAL "")

IF (CMAKE_C_COMPILER_ID MATCHES "^GNU$")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -rdynamic -D_GNU_SOURCE")
#	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fdump-class-hierarchy" )
ENDIF () #CMAKE_C_COMPILER_ID MATCHES "^Gnu$")

IF (CMAKE_C_COMPILER_ID MATCHES "^Clang$" OR CMAKE_CXX_COMPILER_ID MATCHES "^Clang[+][+]$")
	SET(CMAKE_CXX_FLAGS "-D_GNU_SOURCE -D_CLANG_ ${CMAKE_CXX_FLAGS}")
	SET(CMAKE_CXX_FLAGS "-stdlib=libc++ ${CMAKE_CXX_FLAGS}")
	SET(CMAKE_CXX_FLAGS "-Qunused-arguments ${CMAKE_CXX_FLAGS}")
	LINK_LIBRARIES("c++" "c++abi")

	INCLUDE (CMakeForceCompiler)
	SET(CMAKE_SYSTEM_NAME Generic)
	CMAKE_FORCE_C_COMPILER (clang LLVM-Clang)
	CMAKE_FORCE_CXX_COMPILER (clang LLVM-Clang)
ENDIF ()

#
# Add Preprocessor Defines
#
SET(BRZDM_DEFINITIONS "-D_FILE_OFFSET_BITS=64 -D_REENTRANT -D_7ZIP_ST")
IF(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD" OR
		${CMAKE_SYSTEM_NAME} MATCHES "NetBSD" OR
		${CMAKE_SYSTEM_NAME} MATCHES "OpenBSD"
		)
	SET(BRZDM_DEFINITIONS ${BRZDM_DEFINITIONS} "-DNEEDS_BASENAME")
ELSE()
	SET(BRZDM_DEFINITIONS ${BRZDM_DEFINITIONS} "-DHAVE_SHADOW")
ENDIF()

#
# Project Output Paths
#
SET (MAINFOLDER ${PROJECT_SOURCE_DIR})
SET (EXECUTABLE_OUTPUT_PATH "${MAINFOLDER}/bin")
SET (LIBRARY_OUTPUT_PATH "${MAINFOLDER}/lib")

#
# Set pkg-config Search Paths
#
SET(ENV{PKG_CONFIG_PATH}
	"ENV{PKG_CONFIG_PATH}"
	"${USRLIB}/pkgconfig"
	"/usr/share/pkgconfig"
	"/usr/lib/${ARCH}-linux-gnu/pkgconfig"
	"${USRLIB}/${ARCH}-linux-gnu/pkgconfig"
)

#
# Set Library Search Paths
#
SET(ENV{LD_LIBRARY_PATH}
	"ENV{LD_LIBRARY_PATH}"
	"/usr/lib/"
	"${USRLIB}/"
	"/usr/lib/${ARCH}-linux-gnu"
	"${USRLIB}/${ARCH}-linux-gnu"
)

#
# Set cmake module Search Paths
#
SET (CMAKE_MODULE_PATH
	"${CMAKE_MODULE_PATH}"
	"/usr/share/cmake/Modules"
	"/var/cache/cmake/Modules"
	"${MAINFOLDER}/cmake/modules"
)

#
# Project Search Paths
#
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}")
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}/thirdparty")

#PKG_CHECK_MODULES(JPEG REQUIRED libjpeg)
#PKG_CHECK_MODULES(PNG REQUIRED libpng)
#PKG_CHECK_MODULES(ZLIB REQUIRED zlib)

FIND_PACKAGE(X11 REQUIRED)
FIND_PACKAGE(JPEG REQUIRED)
FIND_PACKAGE(PNG REQUIRED)
FIND_PACKAGE(ZLIB REQUIRED)

# System Libraries
FIND_LIBRARY(JPEG jpeg)
FIND_LIBRARY(M_LIB m)
FIND_LIBRARY(RT_LIB rt)
FIND_LIBRARY(CRYPTO_LIB crypt)

#IF (USE_KIOSK)
#	MESSAGE("\tKiosk Enabled")
#	SET(BRZDM_DEFINITIONS ${BRZDM_DEFINITIONS} "-DUSE_KIOSK")
#endIF(USE_KIOSK)

SET (USE_CONSOLEKIT TRUE)
IF (USE_CONSOLEKIT)
	MESSAGE("\tConsoleKit Enabled")
	SET(BRZDM_DEFINITIONS ${BRZDM_DEFINITIONS} "-DUSE_CONSOLEKIT2")
ENDIF (USE_CONSOLEKIT)

FIND_PACKAGE(Freetype REQUIRED)
IF(FREETYPE_FOUND)
	LINK_LIBRARIES(${FREETYPE_LIBRARIES})
	INCLUDE_DIRECTORIES("${FREETYPE_INCLUDE_DIRS}" "/usr/include/freetype2/")
	MESSAGE("\tFREETYPE Includes ${FREETYPE_INCLUDE_DIRS}")
	MESSAGE("\tFREETYPE Found ${FREETYPE_LIBRARIES}")
ELSE(FREETYPE_FOUND)
	MESSAGE(FATAL_ERROR "\tFREETYPE Not Found")
endIF(FREETYPE_FOUND)

# Fontconfig
FIND_PACKAGE(FONTCONFIG REQUIRED)
IF(FONTCONFIG_FOUND)
	MESSAGE("\tFontConfig Found ${FONTCONFIG_LIBRARY}")
#	LINK_LIBRARIES("fontconfig")
	LINK_LIBRARIES(${FONTCONFIG_LIBRARY})
	INCLUDE_DIRECTORIES(${FONTCONFIG_INCLUDE_DIR})
ELSE(FONTCONFIG_FOUND)
	fatal("\tFONTCONFIG Not Found")
endIF(FONTCONFIG_FOUND)

# Nettle
FIND_LIBRARY(LibNETTLE_FOUND "nettle")
IF (LibNETTLE_FOUND)
	MESSAGE("\tNETTLE Found")
	INCLUDE_DIRECTORIES (BEFORE "/usr/include/nettle/")
	LINK_LIBRARIES ("nettle")
	MESSAGE(STATUS "nettle found: libnettle.so")
else()
	MESSAGE(FATAL_ERROR "\tNETTLE Not Found")
ENDIF (LibNETTLE_FOUND)

#FIND_PACKAGE(NETTLE REQUIRED)
PKG_CHECK_MODULES(NETTLE REQUIRED nettle)
IF (NETTLE_VERSION VERSION_LESS  "3.0.0")
	SET(BRZDM_DEFINITIONS ${BRZDM_DEFINITIONS} "-DNETTLE_LESSER")
	MESSAGE(STATUS "Nettle found: libnettle.so ${NETTLE_VERSION}")
ENDIF()

# Imlib2
#SET(IMLIB2_DIR ${CMAKE_MODULE_PATH})
#FIND_PACKAGE(IMLIB2 REQUIRED)
FIND_LIBRARY(IMLIB2_FOUND "Imlib2" PATHS "${USRLIB}")
IF(IMLIB2_FOUND)
	MESSAGE("\tIMLIB2 Found")
	INCLUDE_DIRECTORIES(${IMLIB2_INCLUDE_DIR})
	LINK_LIBRARIES(${IMLIB2_LIBRARY})
	LINK_LIBRARIES(${IMLIB2_LIBRARIES})
	LINK_LIBRARIES ("Imlib2")
ELSE(IMLIB2_FOUND)
	MESSAGE(FATAL_ERROR "\tIMLIB2 Not Found")
ENDIF(IMLIB2_FOUND)

# Nanomsq
#SET(NANOMSG_DIR ${CMAKE_MODULE_PATH})
#FIND_PACKAGE(NANOMSG REQUIRED)
FIND_LIBRARY(NANOMSG_FOUND "nanomsg" PATHS "${USRLIB}")
IF(NANOMSG_FOUND)
	MESSAGE("\tNANOMSG Found")
	LINK_LIBRARIES(${NANOMSG_LIBRARY})
	INCLUDE_DIRECTORIES(${NANOMSG_INCLUDE_DIR})
ELSE(NANOMSG_FOUND)
	MESSAGE("\tNANOMSG Not Found")
ENDIF(NANOMSG_FOUND)

# KeyUtils
SET (USE_KEYUTILS TRUE)
IF(USE_KEYUTILS)
	MESSAGE("\tKeyUtils Enabled")
	SET(BRZDM_DEFINITIONS ${BRZDM_DEFINITIONS} "-DUSE_KEYUTILS")

	FIND_LIBRARY(LibKEYUTILS_FOUND "keyutils" PATHS "${USRLIB}")
	IF (LibKEYUTILS_FOUND)
		LINK_LIBRARIES ("keyutils")
		MESSAGE(STATUS "KEYUTILS Found: libkeyutils.so")
	ELSE()
		MESSAGE("\tKEYUTILS Not Found")
	ENDIF (LibKEYUTILS_FOUND)
ENDIF(USE_KEYUTILS)

# ConsoleKit
IF (USE_CONSOLEKIT)
	FIND_PACKAGE(CkConnector)
	IF(CKCONNECTOR_FOUND)
		MESSAGE("\tConsoleKit Found")
		FIND_PACKAGE(DBus REQUIRED)
		IF(DBUS_FOUND)
			MESSAGE("\tDBus Found ${DBUS_LIBRARIES}")
			LINK_LIBRARIES(${DBUS_LIBRARIES})
			INCLUDE_DIRECTORIES(${DBUS_ARCH_INCLUDE_DIR})
			INCLUDE_DIRECTORIES("${DBUS_INCLUDE_DIR}")
#			INCLUDE_DIRECTORIES("${DBUS_INCLUDE_DIR}" "/usr/lib64/dbus-1.0/include/" "/usr/include/dbus-1.0")
			LINK_LIBRARIES(${CKCONNECTOR_LIBRARIES})
			INCLUDE_DIRECTORIES(${CKCONNECTOR_INCLUDE_DIR})
		ELSE(DBUS_FOUND)
			MESSAGE("\tDBus Not Found")
		ENDIF(DBUS_FOUND)
	ELSE(CKCONNECTOR_FOUND)
		MESSAGE("\tConsoleKit not found, therefore disabled")
	ENDIF(CKCONNECTOR_FOUND)
ELSE(USE_CONSOLEKIT)
	MESSAGE("\tConsoleKit disabled")
ENDIF(USE_CONSOLEKIT)

FIND_PACKAGE (ZLIB REQUIRED)
IF (ZLIB_FOUND)
	INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIRS})
	LINK_LIBRARIES (${ZLIB_LIBRARIES})
ENDIF (ZLIB_FOUND)

#FIND_PACKAGE(LibMagic REQUIRED)
#IF (LibMagic_FOUND)
#	INCLUDE_DIRECTORIES(${LibMagic_INCLUDE_DIRS})
#	LINK_DIRECTORIES(${LibMagic_LIBRARY_DIRS})
#	LINK_LIBRARIES (${LibMagic_LIBRARIES})
#ELSE()
#	MESSAGE(FATAL_ERROR "Package libmagic required, but not found!")
#ENDIF (LibMagic_FOUND)

ADD_DEFINITIONS(${BRZDM_DEFINITIONS})

#Set up include dirs with all found packages
INCLUDE_DIRECTORIES(
	${X11_INCLUDE_DIR}
	${X11_Xft_INCLUDE_PATH}
	${X11_Xrender_INCLUDE_PATH}
	${X11_Xmu_INCLUDE_PATH}
	${FREETYPE_INCLUDE_DIR_freetype2}
	${ZLIB_INCLUDE_DIR}
	${JPEG_INCLUDE_DIR}
	${PNG_INCLUDE_DIR}
	#	${NETTLE_INCLUDE_DIR}
)

#Set up library with all found packages
LINK_LIBRARIES(
	${M_LIB}
	${RT_LIB}
	${CRYPTO_LIB}
	${X11_X11_LIB}
	${X11_Xft_LIB}
	${X11_Xrender_LIB}
	${X11_Xmu_LIB}
	${PNG_LIBRARIES}
)

#
# Configure Files
#
FILE (GLOB_RECURSE CONFIGINPUTS1 include/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS2 include/*.h.in.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS3 src/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS4 src/*.h.in.cmake)

LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS1}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS2}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS3}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS4}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS5}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS6}")

FOREACH (CONFIGINPUT ${CONFIGINPUTS})
STRING (REPLACE ".in.h.cmake" ".h" CONFIGOUTPUT1 "${CONFIGINPUT}")
STRING (REPLACE ".h.in.cmake" ".h" CONFIGOUTPUT2 "${CONFIGOUTPUT1}")
CONFIGURE_FILE ("${CONFIGINPUT}" "${CONFIGOUTPUT2}")
ENDFOREACH (CONFIGINPUT ${CONFIGINPUTS})

#
# Add Build Targets
#
ADD_SUBDIRECTORY(src)

#
# Add Install Targets
#
INSTALL (FILES brzdm.1 DESTINATION ${MANDIR}/man1/)
INSTALL (FILES brzdm.conf DESTINATION ${SYSCONFDIR})
INSTALL (DIRECTORY "${MAINFOLDER}/themes" DESTINATION ${PKGDATADIR})

SET (BRZDM_DEFINITIONS ${BRZDM_DEFINITIONS} "-DPACKAGE=\"brzdm\"")
SET (BRZDM_DEFINITIONS ${BRZDM_DEFINITIONS} "-DVERSION=\"${BRZDM_VERSION}\"")
SET (BRZDM_DEFINITIONS ${BRZDM_DEFINITIONS} "-DPKGDATADIR=\"${PKGDATADIR}\"")
SET (BRZDM_DEFINITIONS ${BRZDM_DEFINITIONS} "-DSYSCONFDIR=\"${SYSCONFDIR}\"")

#
# Add Documentation Targets
#
INCLUDE (DocumentationTargets)

SET(CPACK_PACKAGE_VENDOR "Tsert.Com")
SET(CPACK_GENERATOR "${CMAKE_ZIPMODE}")
SET(CPACK_STRIP_FILES 1)
SET(CPACK_PACKAGE_VERSION_MAJOR 1)
SET(CPACK_PACKAGE_VERSION_MINOR 0)
SET(CPACK_PACKAGE_VERSION_PATCH 0)
SET(CPACK_SOURCE_GENERATOR "${CMAKE_ZIPMODE}")
SET(CPACK_PACKAGE_FILE_NAME lib${PROJECT_NAME}_${APPLICATION_VERSION_STRING}_${ARCH})
SET(CPACK_SOURCE_PACKAGE_FILE_NAME lib${PROJECT_NAME}_${APPLICATION_VERSION_STRING}_${ARCH})
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "/var/cache/brzpkg/archives/${ARCH}/")
SET(CPACK_SOURCE_IGNORE_FILES
"^.*(/CVS/|/[.]svn/|/[.]git/|[.]swp$|[.]#|/#|.*~|cscope).*$"
	#   "^.*(/CVS/;/[.]svn/;/[.]git/;[.]swp$;[.]#;/#;.*~;cscope).*$"
)
SET(CPACK_RESOURCE_FILE_LICENSE
	"${MAINFOLDER}/thirdparty/licenses/GPL-3.0.txt"
)
INCLUDE(CPack)

MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "Module paths ${CMAKE_MODULE_PATH}")
MESSAGE(STATUS "INSTALL PREFIX ${CMAKE_INSTALL_PREFIX}")
MESSAGE(STATUS "SYSCONFDIR ${SYSCONFDIR}")
MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "C Compile Flags ${CMAKE_C_FLAGS}")
MESSAGE(STATUS "C Load Flags ${CMAKE_C_LDFLAGS}")
MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "CXX Compile Flags ${CMAKE_CXX_FLAGS}")
MESSAGE(STATUS "CXX Load Flags ${CMAKE_CXX_LDFLAGS}")
MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "System Name: ${CMAKE_SYSTEM}")
MESSAGE(STATUS "System Processor: ${CMAKE_SYSTEM_PROCESSOR}")
MESSAGE(STATUS "System Version: ${CMAKE_SYSTEM_VERSION}")
MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "Build System: ${CMAKE_HOST_SYSTEM}")
MESSAGE(STATUS "Build System Name: ${CMAKE_HOST_SYSTEM_NAME}")
MESSAGE(STATUS "Build System Version: ${CMAKE_HOST_SYSTEM_VERSION}")
MESSAGE(STATUS "Build System Processor: ${CMAKE_HOST_SYSTEM_PROCESSOR}")
MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "Target System: ${CMAKE_SYSTEM}")
MESSAGE(STATUS "Target System Name: ${CMAKE_SYSTEM_NAME}")
MESSAGE(STATUS "Target System Version: ${CMAKE_SYSTEM_VERSION}")
MESSAGE(STATUS "Target System Processor: ${CMAKE_SYSTEM_PROCESSOR}")
MESSAGE(STATUS "Target Library Architecture: ${CMAKE_LIBRARY_ARCHITECTURE}")
MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "Distribution: ${DISTRO}")
MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "Build Type: '${CMAKE_BUILD_TYPE}'")
MESSAGE(STATUS "Build Compiler: ${CMAKE_CXX_COMPILER_ID} ${CXX}")
MESSAGE(STATUS "Build Compiler Version: ${CMAKE_CXX_COMPILER_VERSION}")
MESSAGE(STATUS "----------------------------------------------------------")

